var start={functions:{getViewsAnalytics:function(t,a){switch(t){case"week":var e="7daysAgo";break;case"month":var e="monthAgo";break;case"year":var e="yearAgo"}gapi.client.request({path:"/v4/reports:batchGet",root:"https://analyticsreporting.googleapis.com/",method:"POST",body:{reportRequests:[{viewId:a,dateRanges:[{startDate:e,endDate:"today"}],metrics:[{expression:"ga:sessions"}],dimensions:[{name:"ga:browser"}]}]}}).then(start.functions.setViewsAnalytics,console.error.bind(console))},setViewsAnalytics:function(t){alert(JSON.stringify(t.result))}},events:{init:function(){$(function(){$(".open-aside").on("click",function(){var t=$(".aside-menu"),a=$(".children-dashboard");"false"==t.attr("data-active")?($(this).attr("data-active","true"),t.attr("data-active","true"),a.attr("data-active","true")):($(this).attr("data-active","false"),t.attr("data-active","false"),a.attr("data-active","false"),t.find(".open-options").attr("data-active","false"),t.find(".options").removeAttr("style"))}),$(".open-sub").on("click",function(){var t=$(this).attr("data-active");$(".open-sub").attr("data-active","false"),"true"!=t&&$(this).attr("data-active","true")}),$("body").on("click",function(){$('.open-sub[data-active="true"]').attr("data-active","false")}),$(".sub-menu, .open-sub").on("click",function(t){t.stopPropagation()}),$(".aside-menu .open-options").on("click",function(){var t=$(".aside-menu").attr("data-active"),a=$(this).attr("data-active");if($(window).outerWidth(!0)<768||"false"==t)return 1;"true"!=a?$(this).attr("data-active","true"):$(this).attr("data-active","false")}),$(".checkbox__group, .radiobox__group").on("click",function(){if($(this).hasClass("checkbox__group"))var t="checkbox";else if($(this).hasClass("radiobox__group"))var t="radiobox";var a=$(this).find("."+t+"__hidden");if($(this).attr("data-group")){var e=$(this).data("group");switch(a.is(":checked")){case!0:$('[group="'+e+'"] .'+t+"__hidden:checked").parent("."+t+"__group").click();break;default:$('[group="'+e+'"] .'+t+"__hidden:not(:checked)").parent("."+t+"__group").click()}}a.is(":checked")?(a.prop("checked",!1),$(this).find("."+t+"__check").removeAttr("style")):("radiobox"==t&&($(this).parents("."+t).find("."+t+"__check").removeAttr("style"),$(this).parents("."+t).find("."+t+"__hidden").prop("checked",!1)),a.prop("checked",!0),$(this).find("."+t+"__check").show())}),$(".box-password__show").on("click",function(){var t=$(this).siblings(".box-password__input");$(this).hasClass("fa-eye")?($(this).removeClass("fa-eye").addClass("fa-eye-slash"),t.attr("type","text")):($(this).removeClass("fa-eye-slash").addClass("fa-eye"),t.attr("type","password"))})})}},plugins:{init:function(){$(function(){$(".fancybox-link").on("click",function(){var t=$(this).data("fancybox-images"),a=t.split(",");$.fancybox(a,{padding:0,transitionIn:"none",transitionOut:"none",type:"image",changeFade:0})})})}},forms:{init:function(){$(function(){$(".form").on("submit",function(t){var a=$(this).attr("data-type-form");if("default"==a)var e="input";else var e="input--"+a;validateForm.functions.validation($(this),e,"input--danger")||t.preventDefault()})})}},init:function(){start.events.init(),start.plugins.init(),start.forms.init()}};start.init();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
